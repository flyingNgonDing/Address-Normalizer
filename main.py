#!/usr/bin/env python3
"""
Ch∆∞∆°ng tr√¨nh chu·∫©n h√≥a ƒë·ªãa ch·ªâ b·ªánh nh√¢n
WINDOWS VERSION - ENHANCED with File Watcher for Auto-restart + EMBEDDED ICON
Entry point cho ·ª©ng d·ª•ng
"""
import sys
import os
import traceback
from pathlib import Path

# ===== PYINSTALLER PATH FIX =====
def setup_paths():
    """Setup paths for PyInstaller"""
    if getattr(sys, 'frozen', False):
        # Running as compiled exe
        bundle_dir = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(sys.executable)))
        application_path = bundle_dir
    else:
        # Running in development
        application_path = os.path.dirname(os.path.abspath(__file__))
    
    # Add to Python path
    if application_path not in sys.path:
        sys.path.insert(0, application_path)
    
    # Add subdirectories to path - CORRECTED based on your structure
    subdirs = ['core', 'data', 'gui', 'utils']
    for subdir in subdirs:
        subdir_path = os.path.join(application_path, subdir)
        if os.path.exists(subdir_path) and subdir_path not in sys.path:
            sys.path.insert(0, subdir_path)
    
    print(f"Application path: {application_path}")
    print(f"Python paths: {sys.path[:5]}...")  # Show first 5 paths
    
    return application_path

# Setup paths first
APPLICATION_PATH = setup_paths()

# ===== SIMPLE ICON MANAGEMENT =====
def setup_window_icon(root):
    """Setup window icon - PyInstaller embedded version"""
    try:
        if getattr(sys, 'frozen', False):
            # Running as compiled exe - icon is embedded by PyInstaller
            # Try to find icon in PyInstaller temp directory
            bundle_dir = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(sys.executable)))
            icon_path = Path(bundle_dir) / "icon.ico"
            
            if icon_path.exists():
                root.iconbitmap(str(icon_path))
                print(f"‚úÖ Embedded icon loaded: {icon_path}")
                return True
            else:
                print(f"‚ö†Ô∏è Embedded icon not found in: {bundle_dir}")
                return False
        else:
            # Running in development - look for icon.ico in project folder
            dev_locations = [
                Path(__file__).parent / "icon.ico",
                Path(APPLICATION_PATH) / "icon.ico",
                Path.cwd() / "icon.ico"
            ]
            
            for icon_path in dev_locations:
                if icon_path.exists():
                    root.iconbitmap(str(icon_path))
                    print(f"‚úÖ Development icon loaded: {icon_path}")
                    return True
            
            print(f"‚ö†Ô∏è Development icon not found")
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è Could not set window icon: {e}")
        return False

# ===== IMPORTS WITH ERROR HANDLING =====
def safe_import():
    """Import modules safely with detailed error reporting"""
    try:
        # Test basic imports first
        print("Testing basic imports...")
        import tkinter as tk
        print("‚úÖ tkinter OK")
        
        # Test pandas
        import pandas as pd
        print("‚úÖ pandas OK")
        
        # Test GUI modules - CORRECTED import paths
        print("Testing GUI imports...")
        try:
            from gui.main_window import MainWindow
            print("‚úÖ gui.main_window OK")
        except ImportError as e:
            print(f"‚ùå gui.main_window failed: {e}")
            # Try alternative import
            from main_window import MainWindow
            print("‚úÖ main_window (direct) OK")
        
        try:
            from gui.styles import setup_ui_styles, apply_windows_theme
            print("‚úÖ gui.styles OK")
        except ImportError as e:
            print(f"‚ùå gui.styles failed: {e}")
            from styles import setup_ui_styles, apply_windows_theme
            print("‚úÖ styles (direct) OK")
        
        try:
            from gui.drag_drop import DragDropHandler, is_drag_drop_available
            print("‚úÖ gui.drag_drop OK")
        except ImportError as e:
            print(f"‚ùå gui.drag_drop failed: {e}")
            from drag_drop import DragDropHandler, is_drag_drop_available
            print("‚úÖ drag_drop (direct) OK")
        
        # Test other modules - CORRECTED import paths
        print("Testing other imports...")
        try:
            from data.mapping_loader import load_mapping
            print("‚úÖ data.mapping_loader OK")
        except ImportError as e:
            print(f"‚ùå data.mapping_loader failed: {e}")
            from mapping_loader import load_mapping
            print("‚úÖ mapping_loader (direct) OK")
        
        try:
            from utils.helpers import check_windows_compatibility
            print("‚úÖ utils.helpers OK")
        except ImportError as e:
            print(f"‚ùå utils.helpers failed: {e}")
            from helpers import check_windows_compatibility
            print("‚úÖ helpers (direct) OK")
        
        # NEW: Import file watcher
        print("Testing file watcher...")
        try:
            from gui.file_watcher import start_file_watching, stop_file_watching, is_file_watching_active
            print("‚úÖ gui.file_watcher OK")
        except ImportError as e:
            print(f"‚ùå gui.file_watcher failed: {e}")
            try:
                from file_watcher import start_file_watching, stop_file_watching, is_file_watching_active
                print("‚úÖ file_watcher (direct) OK")
            except ImportError as e2:
                print(f"‚ùå file_watcher (direct) failed: {e2}")
                # Fallback functions if file_watcher not available
                def start_file_watching(main_window):
                    print("‚ö†Ô∏è File watcher not available")
                    return False
                def stop_file_watching():
                    pass
                def is_file_watching_active():
                    return False
                print("‚úÖ file_watcher (fallback) OK")
        
        # Import config
        import config
        print("‚úÖ config OK")
        
        return {
            'MainWindow': MainWindow,
            'setup_ui_styles': setup_ui_styles,
            'apply_windows_theme': apply_windows_theme,
            'load_mapping': load_mapping,
            'check_windows_compatibility': check_windows_compatibility,
            'start_file_watching': start_file_watching,
            'stop_file_watching': stop_file_watching,
            'is_file_watching_active': is_file_watching_active,
            'config': config
        }
        
    except Exception as e:
        print(f"‚ùå Import error: {e}")
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return None

def check_python_version():
    """Ki·ªÉm tra phi√™n b·∫£n Python"""
    if sys.version_info < (3, 7):
        try:
            import tkinter.messagebox as messagebox
            messagebox.showerror(
                "L·ªói phi√™n b·∫£n Python", 
                f"Ch∆∞∆°ng tr√¨nh y√™u c·∫ßu Python 3.7 tr·ªü l√™n.\n"
                f"Phi√™n b·∫£n hi·ªán t·∫°i: {sys.version}\n\n"
                f"Vui l√≤ng c·∫≠p nh·∫≠t Python."
            )
        except:
            print(f"‚ùå Python version {sys.version_info} not supported. Need 3.7+")
        return False
    return True

def check_dependencies():
    """Ki·ªÉm tra c√°c dependencies c·∫ßn thi·∫øt"""
    required_modules = [
        ('pandas', 'pandas'),
        ('thefuzz', 'thefuzz'),
        ('openpyxl', 'openpyxl'),
        ('xlrd', 'xlrd'),  # For .xls support
    ]
    
    # Optional modules for enhanced features
    optional_modules = [
        ('watchdog', 'watchdog'),  # For file watching
    ]
    
    missing_modules = []
    missing_optional = []
    
    for module_name, import_name in required_modules:
        try:
            __import__(import_name)
            print(f"‚úÖ {module_name}")
        except ImportError:
            missing_modules.append(module_name)
            print(f"‚ùå {module_name}")
    
    for module_name, import_name in optional_modules:
        try:
            __import__(import_name)
            print(f"‚úÖ {module_name} (optional)")
        except ImportError:
            missing_optional.append(module_name)
            print(f"‚ö†Ô∏è {module_name} (optional) - Auto-restart feature disabled")
    
    if missing_modules:
        error_msg = (
            f"‚ùå Thi·∫øu c√°c th∆∞ vi·ªán b·∫Øt bu·ªôc:\n"
            f"{', '.join(missing_modules)}\n\n"
            f"·ª®ng d·ª•ng c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng.\n\n"
            f"Vui l√≤ng ch·∫°y: pip install {' '.join(missing_modules)}"
        )
        print(error_msg)
        try:
            import tkinter.messagebox as messagebox
            messagebox.showerror("Thi·∫øu th∆∞ vi·ªán", error_msg)
        except:
            pass
        return False
    
    if missing_optional:
        print(f"üí° Tip: C√†i ƒë·∫∑t {', '.join(missing_optional)} ƒë·ªÉ c√≥ th√™m t√≠nh nƒÉng:")
        print(f"    pip install {' '.join(missing_optional)}")
    
    return True

def setup_windows_environment():
    """Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng Windows"""
    try:
        # Basic Windows setup
        if sys.platform.startswith('win'):
            try:
                import ctypes
                ctypes.windll.shcore.SetProcessDpiAwareness(1)
            except:
                pass
                
    except Exception as e:
        print(f"Warning: Could not setup Windows environment: {e}")

def create_tkinter_root():
    """T·∫°o Tkinter root window v·ªõi Windows optimization v√† EMBEDDED ICON + DRAG & DROP"""
    try:
        import tkinter as tk
        
        # ‚úÖ FIXED: Always try to use TkinterDnD for drag & drop support
        try:
            from tkinterdnd2 import TkinterDnD
            root = TkinterDnD.Tk()
            print("‚úÖ Using TkinterDnD for drag & drop support (including frozen executable)")
        except ImportError:
            print("‚ö†Ô∏è TkinterDnD not available, using standard Tkinter")
            root = tk.Tk()
            print("‚úÖ Using standard Tkinter (no drag & drop)")
        
        # Test basic tkinter functionality
        root.withdraw()  # Hide window temporarily
        
        # ‚úÖ Setup window icon IMMEDIATELY after creating root
        print("üé® Setting up window icon...")
        icon_success = setup_window_icon(root)
        if icon_success:
            print("‚úÖ Window icon set successfully")
        else:
            print("‚ö†Ô∏è Using default system icon")
        
        # Windows specific root configuration
        if sys.platform.startswith('win'):
            try:
                # Set Windows-specific attributes
                root.wm_attributes('-alpha', 1.0)
                
                # Try to set DPI awareness
                try:
                    import ctypes
                    ctypes.windll.shcore.SetProcessDpiAwareness(1)
                except:
                    pass
                    
            except Exception as e:
                print(f"Warning: Could not set Windows attributes: {e}")
        
        return root
        
    except Exception as e:
        error_msg = f"‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o giao di·ªán:\n{str(e)}"
        print(error_msg)
        raise

def main():
    """Main function - ENHANCED with file watcher integration + EMBEDDED ICON"""
    print("üöÄ Kh·ªüi ƒë·ªông ·ª©ng d·ª•ng Chu·∫©n h√≥a ƒë·ªãa ch·ªâ b·ªánh nh√¢n")
    print("=" * 50)
    
    # Global variable to store file watcher functions
    file_watcher_funcs = None
    
    try:
        # 1. Check Python version
        print("üêç Checking Python version...")
        if not check_python_version():
            input("Press Enter to exit...")
            sys.exit(1)
        
        # 2. Setup paths and imports
        print("üì• Setting up imports...")
        modules = safe_import()
        if not modules:
            print("‚ùå Failed to import required modules")
            input("Press Enter to exit...")
            sys.exit(1)
        
        # Extract modules
        MainWindow = modules['MainWindow']
        setup_ui_styles = modules['setup_ui_styles'] 
        apply_windows_theme = modules['apply_windows_theme']
        load_mapping = modules['load_mapping']
        check_windows_compatibility = modules['check_windows_compatibility']
        
        # NEW: Extract file watcher functions
        start_file_watching = modules['start_file_watching']
        stop_file_watching = modules['stop_file_watching']
        is_file_watching_active = modules['is_file_watching_active']
        file_watcher_funcs = (start_file_watching, stop_file_watching, is_file_watching_active)
        
        # 3. Check dependencies
        print("üì¶ Checking dependencies...")
        check_dependencies()  # Don't exit on failure, just warn
        
        # 4. Setup Windows environment
        print("ü™ü Setting up Windows environment...")
        setup_windows_environment()
        
        # 5. Create Tkinter root - WITH EMBEDDED ICON
        print("üñºÔ∏è  Creating GUI window with embedded icon...")
        root = create_tkinter_root()
        
        # 6. Load mapping data
        print("üìä Loading mapping data...")
        try:
            load_mapping()
            print("‚úÖ Mapping data loaded successfully.")
        except Exception as e:
            error_msg = f"‚ùå L·ªói load d·ªØ li·ªáu mapping:\n{str(e)}\n\nKi·ªÉm tra file mapping.xlsx c√≥ t·ªìn t·∫°i kh√¥ng."
            print(error_msg)
            try:
                import tkinter.messagebox as messagebox
                messagebox.showerror("L·ªói d·ªØ li·ªáu", error_msg)
            except:
                pass
            # Continue without mapping data
            print("‚ö†Ô∏è  Continuing without mapping data...")
        
        # 7. Show window and create main window
        print("üé® Creating main window...")
        root.deiconify()  # Show window
        app = MainWindow(root)
        
        # ‚úÖ Re-apply icon after MainWindow is created (in case it gets reset)
        print("üîÑ Re-applying window icon...")
        setup_window_icon(root)
        
        # 8. NEW: Start file watching for auto-restart
        print("üëÅÔ∏è Setting up file watching...")
        file_watch_success = start_file_watching(app)
        if file_watch_success:
            print("‚úÖ Auto-restart enabled - mapping.xlsx changes will trigger restart")
        else:
            print("‚ö†Ô∏è Auto-restart disabled - manual restart required for mapping changes")
        
        # 9. Setup cleanup on exit
        def on_app_exit():
            """Cleanup function when app exits"""
            print("üßπ Cleaning up...")
            if file_watcher_funcs:
                try:
                    stop_file_watching()
                except Exception as e:
                    print(f"Warning: Error stopping file watcher: {e}")
            root.quit()
            root.destroy()
        
        # Bind cleanup to window close
        root.protocol("WM_DELETE_WINDOW", on_app_exit)
        
        # 10. Start main loop
        print("‚úÖ Application started successfully!")
        print("üñ±Ô∏è  GUI should be visible now...")
        print("")
        print("üÜï NEW FEATURES:")
        print("   ‚úÖ Settings button is now visible")
        print("   ‚úÖ Support for .xls files")
        print("   ‚úÖ Multi-sheet Excel processing")
        print("   ‚úÖ Enhanced ·∫•p matching for sheet2")
        print("   ‚úÖ Author info displayed in bottom-right")
        print("   ‚úÖ Embedded icon (no external files needed)")
        if file_watch_success:
            print("   ‚úÖ Auto-restart when mapping.xlsx is saved")
        else:
            print("   ‚ö†Ô∏è Auto-restart disabled (watchdog not available)")
        print("")
        print("üìù MAPPING.XLSX SHEET2 NEW STRUCTURE:")
        print("   C·ªôt A: apcu (·∫•p c≈©)")
        print("   C·ªôt B: xacu (x√£ c≈©)")
        print("   C·ªôt C: huyencu (huy·ªán c≈©)")
        print("   C·ªôt D: tinhcu (t·ªânh c≈©)")
        print("   C·ªôt E: apmoi (·∫•p m·ªõi)")
        print("   C·ªôt F: xamoi (x√£ m·ªõi)")
        print("   C·ªôt G: tinhmoi (t·ªânh m·ªõi)")
        print("")
        print("üéØ AUTHOR INFO:")
        print("   Vi·ªán Pasteur TP HCM - Khoa KSPNBT - Nh√≥m TKBC")
        print("   T√°c gi·∫£: ƒêinh VƒÉn Ng√¥n (08888 31135)")
        print("")
        
        root.mainloop()
        
    except KeyboardInterrupt:
        print("‚ùå Application interrupted by user")
        if file_watcher_funcs:
            try:
                file_watcher_funcs[1]()  # stop_file_watching
            except:
                pass
        sys.exit(0)
        
    except Exception as e:
        error_msg = f"‚ùå L·ªói kh·ªüi t·∫°o ·ª©ng d·ª•ng:\n{str(e)}\n\nStacktrace:\n{traceback.format_exc()}"
        print(error_msg)
        
        try:
            import tkinter.messagebox as messagebox
            messagebox.showerror("L·ªói", error_msg)
        except:
            print("‚ùå Kh√¥ng th·ªÉ hi·ªÉn th·ªã messagebox")
        
        # Cleanup on error
        if file_watcher_funcs:
            try:
                file_watcher_funcs[1]()  # stop_file_watching
            except:
                pass
        
        input("Press Enter to exit...")
        sys.exit(1)

if __name__ == "__main__":
    # Windows specific startup checks
    if sys.platform.startswith('win'):
        # Set console title for debugging
        try:
            os.system("title PIHCM - Chu·∫©n h√≥a ƒë·ªãa ch·ªâ b·ªánh nh√¢n - EMBEDDED ICON")
        except:
            pass
        
        # Print system info
        print(f"üñ•Ô∏è  Running on: {sys.platform}")
        print(f"üìÅ Working directory: {os.getcwd()}")
        print(f"üêç Python: {sys.version}")
        print(f"üì¶ Frozen: {getattr(sys, 'frozen', False)}")
        print(f"üìÇ Current folder structure:")
        print("   ‚îú‚îÄ‚îÄ core/")
        print("   ‚îú‚îÄ‚îÄ data/")
        print("   ‚îú‚îÄ‚îÄ gui/")
        print("   ‚îú‚îÄ‚îÄ utils/")
        print("   ‚îú‚îÄ‚îÄ main.py")
        print("   ‚îú‚îÄ‚îÄ icon.ico          ‚Üê For development")
        print("   ‚îî‚îÄ‚îÄ mapping.xlsx")
        print("   üìù Note: icon.ico embedded in .exe when compiled")
        print("")
    
    # Handle command line arguments (for file associations)
    if len(sys.argv) > 1:
        print(f"üìÑ Command line argument: {sys.argv[1]}")
    
    # Run main application
    main()