"""
File Processing Logic
Handles file selection, processing, and multi-sheet operations
FIXED: Enhanced .xls support with proper file dialog and error handling
"""
import tkinter as tk
from tkinter import filedialog, messagebox
import threading
import time
import os
import sys
import pandas as pd
from concurrent.futures import ThreadPoolExecutor

from config import EXPANDED_GEOMETRY, COLORS, CHUNK_SIZE, FILE_DIALOG_FILETYPES

# Safe import for sheet_selector
try:
    from gui.sheet_selector import show_sheet_selector
except ImportError:
    # Fallback function if sheet_selector is not available
    def show_sheet_selector(parent, sheet_names, file_name):
        """Fallback sheet selector using simple dialog"""
        if len(sheet_names) == 1:
            return {'action': 'start_processing', 'sheets': sheet_names}
        
        # Simple selection dialog
        selection = messagebox.askyesno(
            "Multi-sheet detected",
            f"File c√≥ {len(sheet_names)} sheets:\n" + "\n".join(f"- {name}" for name in sheet_names) +
            f"\n\nCh·ªçn YES ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£, NO ƒë·ªÉ ch·ªâ x·ª≠ l√Ω sheet ƒë·∫ßu ti√™n."
        )
        
        if selection:
            return {'action': 'start_processing', 'sheets': sheet_names}  # Process all sheets
        else:
            return {'action': 'start_processing', 'sheets': [sheet_names[0]]}  # Process only first sheet

from core.file_handler import read_file, save_file, save_multiple_sheets, check_required_columns, get_excel_sheet_names
from core.text_processor import chuan_hoa, find_ap_column, find_address_column
from core.fuzzy_matcher import fuzzy_match_row
from utils.performance import detect_mode
from utils.helpers import format_time, format_number


class FileProcessor:
    """Handles all file processing operations"""
    
    def __init__(self, main_window):
        self.main_window = main_window
        self.root = main_window.root
        self.components = None  # Will be set after components are created
    
    def set_components(self, components):
        """Set reference to window components"""
        self.components = components
    
    def chon_file(self):
        """Ch·ªçn file th√¥ng qua dialog - FIXED with proper .xls support"""
        try:
            # FIXED: Use proper file dialog format from config
            file_benh_nhan = filedialog.askopenfilename(
                title="Ch·ªçn file danh s√°ch b·ªánh nh√¢n",
                filetypes=FILE_DIALOG_FILETYPES,
                initialdir=self._get_initial_dir()
            )
            
            if not file_benh_nhan:
                return

            # ADDED: Validate file extension
            file_ext = os.path.splitext(file_benh_nhan.lower())[1]
            if file_ext not in ['.xlsx', '.xls', '.csv']:
                messagebox.showerror(
                    "L·ªói ƒë·ªãnh d·∫°ng file", 
                    f"File kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {file_ext}\n\n"
                    f"Ch·ªâ h·ªó tr·ª£: .xlsx, .xls, .csv"
                )
                return

            # ADDED: Check if file can be read
            if not self._validate_file_accessibility(file_benh_nhan):
                return

            self.start_processing(file_benh_nhan)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói ch·ªçn file:\n{str(e)}")
    
    def _get_initial_dir(self):
        """Get initial directory for file dialog"""
        if sys.platform.startswith('win'):
            return os.path.expanduser("~\\Desktop")  # Windows Desktop
        else:
            return os.path.expanduser("~/Desktop")   # Unix Desktop
    
    def _validate_file_accessibility(self, file_path):
        """Validate if file can be accessed and read"""
        try:
            # Check if file exists and is readable
            if not os.path.exists(file_path):
                messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i:\n{file_path}")
                return False
            
            if not os.access(file_path, os.R_OK):
                messagebox.showerror("L·ªói", f"Kh√¥ng c√≥ quy·ªÅn ƒë·ªçc file:\n{file_path}")
                return False
            
            # Check file size (not too large)
            file_size = os.path.getsize(file_path)
            if file_size > 100 * 1024 * 1024:  # 100MB limit
                result = messagebox.askyesno(
                    "C·∫£nh b√°o", 
                    f"File r·∫•t l·ªõn ({file_size // (1024*1024)} MB).\n"
                    f"Qu√° tr√¨nh x·ª≠ l√Ω c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian.\n\n"
                    f"B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?",
                    icon='warning'
                )
                if not result:
                    return False
            
            # ADDED: Quick test to see if file can be opened
            file_ext = os.path.splitext(file_path.lower())[1]
            
            if file_ext in ['.xlsx', '.xls']:
                # Test Excel file reading
                try:
                    get_excel_sheet_names(file_path)
                except Exception as e:
                    error_msg = f"L·ªói ƒë·ªçc file Excel:\n{str(e)}"
                    
                    if file_ext == '.xls':
                        error_msg += f"\n\nüí° G·ª¢I √ù CHO FILE .XLS:"
                        error_msg += f"\n- ƒê·∫£m b·∫£o ƒë√£ c√†i ƒë·∫∑t: pip install xlrd==2.0.1"
                        error_msg += f"\n- Th·ª≠ m·ªü file b·∫±ng Excel v√† l∆∞u l·∫°i th√†nh .xlsx"
                        error_msg += f"\n- Ki·ªÉm tra file c√≥ b·ªã h·ªèng kh√¥ng"
                    
                    messagebox.showerror("L·ªói ƒë·ªçc file", error_msg)
                    return False
            
            elif file_ext == '.csv':
                # Test CSV file reading
                try:
                    pd.read_csv(file_path, nrows=1)  # Test read first row
                except Exception as e:
                    messagebox.showerror("L·ªói ƒë·ªçc CSV", f"L·ªói ƒë·ªçc file CSV:\n{str(e)}")
                    return False
            
            return True
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói ki·ªÉm tra file:\n{str(e)}")
            return False
    
    def process_file_from_path(self, file_path):
        """X·ª≠ l√Ω file t·ª´ ƒë∆∞·ªùng d·∫´n"""
        if not os.path.exists(file_path):
            messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i:\n{file_path}")
            return
        
        # ADDED: Validate file before processing
        if not self._validate_file_accessibility(file_path):
            return
        
        # Hi·ªÉn th·ªã th√¥ng b√°o x√°c nh·∫≠n
        file_name = os.path.basename(file_path)
        result = messagebox.askyesno(
            "X√°c nh·∫≠n", 
            f"B·∫°n c√≥ mu·ªën x·ª≠ l√Ω file:\n{file_name}?",
            icon='question'
        )
        if not result:
            return
        
        self.start_processing(file_path)
    
    def start_processing(self, file_path):
        """B·∫Øt ƒë·∫ßu qu√° tr√¨nh x·ª≠ l√Ω file - ENHANCED with better error handling"""
        try:
            # Check if Excel file and get sheets
            file_ext = os.path.splitext(file_path.lower())[1]
            selected_sheets = None
            
            if file_ext in ['.xlsx', '.xls']:
                try:
                    sheet_names = get_excel_sheet_names(file_path)
                    
                    if len(sheet_names) > 1:
                        # Show sheet selector dialog
                        file_name = os.path.basename(file_path)
                        dialog_result = show_sheet_selector(self.root, sheet_names, file_name)
                        
                        # Handle dialog result
                        if not dialog_result or dialog_result['action'] == 'cancel':
                            return  # User cancelled
                        
                        if dialog_result['action'] == 'start_processing':
                            selected_sheets = dialog_result['sheets']
                            if not selected_sheets:
                                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ sheet n√†o ƒë∆∞·ª£c ch·ªçn!")
                                return
                        else:
                            return  # Unknown action
                    else:
                        selected_sheets = [sheet_names[0]]  # Single sheet
                        
                except Exception as e:
                    error_msg = f"L·ªói ƒë·ªçc file Excel:\n{str(e)}"
                    
                    if file_ext == '.xls':
                        error_msg += f"\n\nüîß C√ÅCH KH·∫ÆC PH·ª§C FILE .XLS:"
                        error_msg += f"\n1. C√†i ƒë·∫∑t ƒë√∫ng version xlrd:"
                        error_msg += f"\n   pip uninstall xlrd -y"
                        error_msg += f"\n   pip install xlrd==2.0.1"
                        error_msg += f"\n\n2. Ho·∫∑c m·ªü file b·∫±ng Excel v√† l∆∞u th√†nh .xlsx"
                        error_msg += f"\n\n3. Ki·ªÉm tra file c√≥ b·ªã h·ªèng kh√¥ng"
                    
                    messagebox.showerror("L·ªói ƒë·ªçc Excel", error_msg)
                    return
            else:
                selected_sheets = [None]  # CSV file
            
            # Continue with existing processing logic...
            # Animate window resize for Windows
            if self.main_window.use_animations:
                self.main_window.animate_window_resize()
            else:
                self.root.geometry(EXPANDED_GEOMETRY)
                
            self.main_window.components.label.config(text="ƒêang kh·ªüi t·∫°o x·ª≠ l√Ω...")
            
            # ·∫®n c√°c element kh√¥ng c·∫ßn thi·∫øt
            self.main_window.components.main_button_frame.pack_forget()
            self.main_window.components.settings_container.pack_forget()
            
            self.main_window.components.control_frame.pack(pady=15)
            self.main_window.components.log_frame.pack(fill="both", expand=True, pady=(0, 10))

            # Reset state
            self.main_window.processing = True
            self.main_window.stop_flag = False
            self.main_window.paused = False
            self.main_window.done_rows = 0
            self.main_window.total_paused_time = 0
            self.main_window.pause_start_time = 0
            self.main_window.start_time = time.time()
            
            # Multi-sheet processing setup
            self.main_window.current_sheet_index = 0
            self.main_window.total_sheets = len(selected_sheets)
            self.main_window.sheet_results = {}
            
            self.update_timer()
            threading.Thread(target=self.xu_ly_file_sheets, args=(file_path, selected_sheets), daemon=True).start()
            
        except Exception as e:
            messagebox.showerror("L·ªói kh·ªüi t·∫°o", f"L·ªói kh·ªüi t·∫°o x·ª≠ l√Ω:\n{str(e)}")

    def xu_ly_file_sheets(self, file_path, selected_sheets):
        """X·ª≠ l√Ω multiple sheets"""
        try:
            self.root.after(0, lambda: self.main_window.components.label.config(
                text=f"ƒêang x·ª≠ l√Ω {len(selected_sheets)} sheet(s)..."
            ))
            
            for i, sheet_name in enumerate(selected_sheets):
                if self.main_window.stop_flag:
                    break
                
                self.main_window.current_sheet_index = i + 1
                
                # Update progress for current sheet
                self.root.after(0, lambda s=sheet_name or "Sheet1", idx=i+1: self.main_window.components.label.config(
                    text=f"ƒêang x·ª≠ l√Ω sheet {idx}/{len(selected_sheets)}: {s}"
                ))
                
                # Process individual sheet
                result_df = self.xu_ly_single_sheet(file_path, sheet_name, i)
                
                if result_df is not None and not self.main_window.stop_flag:
                    # Store result with proper sheet name
                    result_sheet_name = f"Sheet{i+1}"
                    self.main_window.sheet_results[result_sheet_name] = result_df
                    
                    self.root.after(0, lambda s=sheet_name or "Sheet1": self.main_window.components.update_sheet_log(
                        f"‚úÖ Ho√†n th√†nh sheet: {s}"
                    ))
                elif self.main_window.stop_flag:
                    break
                else:
                    self.root.after(0, lambda s=sheet_name or "Sheet1": self.main_window.components.update_sheet_log(
                        f"‚ùå L·ªói x·ª≠ l√Ω sheet: {s}"
                    ))
            
            if not self.main_window.stop_flag and self.main_window.sheet_results:
                # Save all results
                self._save_multiple_sheets_result(file_path)
            
        except Exception as e:
            if not self.main_window.stop_flag:
                error_msg = f"C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω:\n{str(e)}"
                self.root.after(0, lambda: messagebox.showerror("L·ªói", error_msg))
                self.root.after(0, lambda: self.main_window.components.label.config(text="‚ùå X·ª≠ l√Ω th·∫•t b·∫°i"))
        finally:
            self.root.after(0, self.main_window.reset_ui)
    
    def xu_ly_single_sheet(self, file_path, sheet_name, sheet_index):
        """X·ª≠ l√Ω m·ªôt sheet ƒë∆°n l·∫ª - ENHANCED with better error handling"""
        try:
            # ƒê·ªçc data t·ª´ sheet
            if sheet_name is not None:
                df = read_file(file_path, sheet_name)
            else:
                df = read_file(file_path)  # CSV
            
            # Ki·ªÉm tra d·ªØ li·ªáu r·ªóng
            if df.empty:
                self.root.after(0, lambda: self.main_window.components.update_sheet_log(
                    f"‚ö†Ô∏è Sheet r·ªóng: {sheet_name or 'Sheet1'}"
                ))
                return None
            
            # Ki·ªÉm tra c√°c c·ªôt b·∫Øt bu·ªôc
            column_check = check_required_columns(df)
            if not column_check['valid']:
                missing_cols = ', '.join(column_check['missing'])
                self.root.after(0, lambda: self.main_window.components.update_sheet_log(
                    f"‚ùå Sheet thi·∫øu c·ªôt: {missing_cols}"
                ))
                return None
            
            xa_col = column_check['xa_col']
            huyen_col = column_check['huyen_col'] 
            tinh_col = column_check['tinh_col']
            
            # Find ·∫•p and address columns
            ap_col = find_ap_column(df)
            address_col = find_address_column(df)
            
            sheet_rows = len(df)
            self.main_window.total_rows = sheet_rows * self.main_window.total_sheets  # Approximate for progress
            
            # X·ª≠ l√Ω theo chunks v·ªõi Windows optimization
            processed_df = self._process_dataframe_chunks_with_ap(
                df, xa_col, huyen_col, tinh_col, ap_col, address_col, sheet_index
            )
            
            return processed_df
            
        except Exception as e:
            error_msg = f"Error processing sheet {sheet_name}: {e}"
            print(error_msg)
            self.root.after(0, lambda: self.main_window.components.update_sheet_log(
                f"‚ùå L·ªói x·ª≠ l√Ω sheet {sheet_name}: {str(e)}"
            ))
            return None
    
    def _process_dataframe_chunks_with_ap(self, df, xa_col, huyen_col, tinh_col, ap_col, address_col, sheet_index):
        """Process DataFrame with ·∫•p support"""
        # Use smaller chunks on Windows for better responsiveness
        chunk_size = min(CHUNK_SIZE, 300)
        sheet_rows = len(df)
        n_chunks = (sheet_rows + chunk_size - 1) // chunk_size
        results = [None] * n_chunks
        mode = detect_mode()

        def worker(chunk_index):
            if self.main_window.stop_flag:
                return
            start = chunk_index * chunk_size
            end = min((chunk_index + 1) * chunk_size, sheet_rows)
            chunk = df.iloc[start:end].copy()
            processed = self.process_chunk_with_ap(
                chunk, xa_col, huyen_col, tinh_col, ap_col, address_col, 
                chunk_index, n_chunks, sheet_index
            )
            if not self.main_window.stop_flag:
                results[chunk_index] = processed

        # Use more conservative threading on Windows
        if mode == "serial" or sys.platform.startswith('win'):
            for i in range(n_chunks):
                if self.main_window.stop_flag:
                    break
                worker(i)
        else:
            max_workers = min(2, os.cpu_count() or 1)  # Limit to 2 workers on Windows
            self.main_window.executor = ThreadPoolExecutor(max_workers=max_workers)
            futures = []
            
            for i in range(n_chunks):
                if self.main_window.stop_flag:
                    break
                future = self.main_window.executor.submit(worker, i)
                futures.append(future)

            # Wait for completion with timeout
            timeout_counter = 0
            while not self.main_window.stop_flag and any(r is None for r in results) and timeout_counter < 300:  # 5 minute timeout
                time.sleep(1)
                timeout_counter += 1

            if self.main_window.executor:
                self.main_window.executor.shutdown(wait=False)

        # G·ªôp k·∫øt qu·∫£
        valid_results = [r for r in results if r is not None]
        if not valid_results:
            return None

        return pd.concat(valid_results, ignore_index=True)
    
    def process_chunk_with_ap(self, chunk, xa_col, huyen_col, tinh_col, ap_col, address_col, chunk_index=0, chunk_total=1, sheet_index=0):
        """X·ª≠ l√Ω m·ªôt chunk d·ªØ li·ªáu v·ªõi ·∫•p support - FIXED"""
        # T·∫°o c√°c c·ªôt t·∫°m th·ªùi ƒë·ªÉ x·ª≠ l√Ω
        chunk['_xa_chuan'] = chunk[xa_col].apply(chuan_hoa)
        chunk['_huyen_chuan'] = chunk[huyen_col].apply(chuan_hoa)
        chunk['_tinh_chuan'] = chunk[tinh_col].apply(chuan_hoa)

        chunk['L√Ω do kh√¥ng match'] = chunk.apply(
            lambda row: 'Thi·∫øu x√£/t·ªânh' if not row['_xa_chuan'].strip() or not row['_tinh_chuan'].strip() else '',
            axis=1
        )

        results = []
        # FIXED: S·ª≠ d·ª•ng iterrows() thay v√¨ itertuples() ƒë·ªÉ tr√°nh l·ªói attribute
        for idx, row in chunk.iterrows():
            # Ki·ªÉm tra pause/stop with shorter sleep for Windows responsiveness
            while self.main_window.paused and not self.main_window.stop_flag:
                time.sleep(0.05)
            if self.main_window.stop_flag:
                return chunk

            if row['L√Ω do kh√¥ng match']:  # N·∫øu ƒë√£ c√≥ l√Ω do kh√¥ng match
                results.append((None, None, None, None, None, row['L√Ω do kh√¥ng match']))
            else:
                # FIXED: Get ·∫•p and address info using proper column access
                ap_value = row[ap_col] if ap_col and ap_col in chunk.columns else None
                address_value = row[address_col] if address_col and address_col in chunk.columns else None
                
                # FIXED: Call fuzzy match with proper row access
                matched = fuzzy_match_row(
                    row['_xa_chuan'], row['_huyen_chuan'], row['_tinh_chuan'],
                    ap=ap_value, address_detail=address_value
                )
                results.append(matched)

            with self.main_window.lock:
                self.main_window.done_rows += 1
            
            # Update log more frequently on Windows for better user feedback
            local_idx = len(results)
            if local_idx % 5 == 0 or local_idx == len(chunk):
                self.main_window.components.update_log_with_sheet(chunk_index, chunk_total, local_idx, len(chunk), sheet_index)

        # L∆∞u k·∫øt qu·∫£
        chunk[['_xacu', '_huyencu', '_tinhcu', 'X√£ sau s√°p nh·∫≠p', 'T·ªânh sau s√°p nh·∫≠p', 'L√Ω do kh√¥ng match']] = pd.DataFrame(results, index=chunk.index)
        
        # X√≥a c√°c c·ªôt t·∫°m th·ªùi
        chunk = chunk.drop(columns=['_xa_chuan', '_huyen_chuan', '_tinh_chuan', '_xacu', '_huyencu', '_tinhcu'])
        
        return chunk
    
    def _save_multiple_sheets_result(self, original_file_path):
        """L∆∞u k·∫øt qu·∫£ multiple sheets"""
        try:
            # FIXED: Windows specific file dialog
            file_luu = filedialog.asksaveasfilename(
                title="L∆∞u file k·∫øt qu·∫£",
                defaultextension=".xlsx",
                filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")],
                initialdir=self._get_initial_dir()
            )
            
            if not file_luu:
                self.root.after(0, self.main_window.reset_ui)
                return

            # Prepare sheet data for saving (keep original columns + new columns)
            sheets_to_save = {}
            total_processed = 0
            
            for sheet_name, df_result in self.main_window.sheet_results.items():
                # Keep all original columns plus new ones
                sheets_to_save[sheet_name] = df_result
                total_processed += len(df_result)
            
            # Save multiple sheets
            save_multiple_sheets(sheets_to_save, file_luu)
            
            self.root.after(0, lambda: self.main_window.components.label.config(text="‚úÖ X·ª≠ l√Ω ho√†n t·∫•t th√†nh c√¥ng!"))
            self.root.after(0, lambda: messagebox.showinfo(
                "Ho√†n t·∫•t", 
                f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {len(self.main_window.sheet_results)} sheet(s)!\n"
                f"T·ªïng c·ªông {format_number(total_processed)} b·∫£n ghi.\n\n"
                f"File k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i:\n{file_luu}"
            ))
        except PermissionError:
            self.root.after(0, lambda: messagebox.showerror(
                "L·ªói", 
                f"Kh√¥ng th·ªÉ l∆∞u file!\n\n"
                f"File c√≥ th·ªÉ ƒëang ƒë∆∞·ª£c m·ªü trong Excel.\n"
                f"Vui l√≤ng ƒë√≥ng Excel v√† th·ª≠ l·∫°i."
            ))
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror("L·ªói", f"L·ªói l∆∞u file: {str(e)}"))
    
    def update_timer(self):
        """C·∫≠p nh·∫≠t timer"""
        if self.main_window.processing and not self.main_window.stop_flag:
            self.update_progress()
            self.root.after(500, self.update_timer)
    
    def update_progress(self):
        """C·∫≠p nh·∫≠t progress bar v√† th·ªùi gian"""
        try:
            done = self.main_window.done_rows
            progress_percentage = done / self.main_window.total_rows * 100 if self.main_window.total_rows else 0
            self.main_window.components.progress['value'] = progress_percentage
            
            # T√≠nh th·ªùi gian th·ª±c t·∫ø ƒë√£ tr·∫£i qua
            current_time = time.time()
            
            if self.main_window.paused:
                elapsed = int(self.main_window.pause_start_time - self.main_window.start_time - self.main_window.total_paused_time)
            else:
                elapsed = int(current_time - self.main_window.start_time - self.main_window.total_paused_time)
            
            elapsed = max(0, elapsed)
            
            # T√≠nh th·ªùi gian c√≤n l·∫°i
            if done > 0 and elapsed > 0:
                remaining = int(elapsed * (self.main_window.total_rows - done) / done)
            else:
                remaining = 0
            
            # Update label with progress percentage and sheet info
            sheet_info = ""
            if self.main_window.total_sheets > 1:
                sheet_info = f" - Sheet {self.main_window.current_sheet_index}/{self.main_window.total_sheets}"
            
            self.main_window.components.time_label.config(
                text=f"{format_time(elapsed)} / {format_time(remaining)} - "
                     f"th·ªùi gian ƒë√£ x·ª≠ l√Ω / th·ªùi gian c√≤n l·∫°i ({progress_percentage:.1f}%){sheet_info}"
            )
        except Exception as e:
            print(f"Progress update error: {e}")
    
    def toggle_pause(self):
        """Toggle pause/resume"""
        current_time = time.time()
        
        if not self.main_window.paused:
            self.main_window.paused = True
            self.main_window.pause_start_time = current_time
            # ƒê·ªïi th√†nh n√∫t "Ti·∫øp T·ª•c" m√†u xanh
            self.main_window.components.pause_button.config(
                text="Ti·∫øp T·ª•c", 
                bg=COLORS['success'],
                activebackground="#1b5e20"
            )
        else:
            self.main_window.paused = False
            self.main_window.total_paused_time += current_time - self.main_window.pause_start_time
            self.main_window.pause_start_time = 0
            # ƒê·ªïi v·ªÅ n√∫t "T·∫°m D·ª´ng" m√†u ƒë·ªè
            self.main_window.components.pause_button.config(
                text="T·∫°m D·ª´ng", 
                bg=COLORS['danger'],
                activebackground="#b71c1c"
            )
    
    def cancel_process(self):
        """Hu·ª∑ ho√†n to√†n ti·∫øn tr√¨nh x·ª≠ l√Ω"""
        result = messagebox.askyesno(
            "X√°c nh·∫≠n", 
            "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën hu·ª∑ ti·∫øn tr√¨nh ƒëang x·ª≠ l√Ω?",
            icon='warning'
        )
        if result:
            self.main_window.stop_flag = True
            if self.main_window.executor:
                self.main_window.executor.shutdown(wait=False)
