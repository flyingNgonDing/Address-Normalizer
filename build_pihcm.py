#!/usr/bin/env python3
import os
import sys
import shutil
import subprocess
from pathlib import Path
import time

class PIHCMBuilder:
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.dist_folder = self.project_root / "dist"
        self.dist_final = self.project_root / "dist_final"
        self.build_folder = self.project_root / "build"
        self.exe_name = "PIHCM - Chuyen doi don vi hanh chinh.exe"
        self.mapping_file = self.project_root / "mapping.xlsx"
        self.icon_file = self.project_root / "icon.ico"
        
        print(f"üèóÔ∏è  PIHCM Builder initialized")
        print(f"üìÅ Project root: {self.project_root}")
    
    def check_requirements(self):
        print("\nüîç Checking build requirements...")
        
        try:
            result = subprocess.run([sys.executable, "-m", "PyInstaller", "--version"], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ PyInstaller: {result.stdout.strip()}")
            else:
                print("‚ùå PyInstaller not found. Installing...")
                subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"])
        except Exception as e:
            print(f"‚ö†Ô∏è PyInstaller check failed: {e}")
            return False
        
        main_py = self.project_root / "main.py"
        if not main_py.exists():
            print(f"‚ùå main.py not found")
            return False
        print(f"‚úÖ main.py found")
        
        if not self.mapping_file.exists():
            print(f"‚ö†Ô∏è mapping.xlsx not found - will create sample")
            self.create_sample_mapping()
        else:
            print(f"‚úÖ mapping.xlsx found")
        
        if not self.icon_file.exists():
            print(f"‚ö†Ô∏è icon.ico not found - will create sample")
            self.create_sample_icon()
        else:
            print(f"‚úÖ icon.ico found")
        
        return True
    
    def create_sample_icon(self):
        print("\nüé® Creating sample icon.ico...")
        try:
            from PIL import Image, ImageDraw
            
            img = Image.new('RGBA', (32, 32), (0, 120, 215, 255))
            draw = ImageDraw.Draw(img)
            draw.rectangle([14, 8, 18, 24], fill=(255, 255, 255, 255))
            draw.rectangle([8, 14, 24, 18], fill=(255, 255, 255, 255))
            img.save(self.icon_file, format='ICO', sizes=[(32, 32)])
            print(f"‚úÖ Created sample icon.ico with PIL")
            return True
        except ImportError:
            print("‚ö†Ô∏è PIL not available, creating minimal ICO file...")
            ico_data = bytes([
                0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x20, 0x00, 0x00, 0x01, 0x00,
                0x20, 0x00, 0x00, 0x04, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00
            ]) + b'\x00' * 1024
            
            with open(self.icon_file, 'wb') as f:
                f.write(ico_data)
            print(f"‚úÖ Created minimal icon.ico")
            return True
        except Exception as e:
            print(f"‚ùå Failed to create icon.ico: {e}")
            return False
    
    def create_sample_mapping(self):
        print("\nüìÑ Creating sample mapping.xlsx...")
        try:
            import pandas as pd
            
            sheet1_data = {
                'xacu': ['X√£ T√¢n H∆∞ng', 'Ph∆∞·ªùng B·∫øn Ngh√©', 'X√£ An Ph√∫'],
                'huyencu': ['Huy·ªán C·∫ßn Gi·ªù', 'Qu·∫≠n 1', 'Qu·∫≠n 2'],
                'tinhcu': ['TP.HCM', 'TP.HCM', 'TP.HCM'],
                'xamoi': ['X√£ T√¢n H∆∞ng', 'Ph∆∞·ªùng B·∫øn Ngh√©', 'Ph∆∞·ªùng An Ph√∫'],
                'tinhmoi': ['TP.HCM', 'TP.HCM', 'TP.HCM']
            }
            
            sheet2_data = {
                'apcu': ['·∫§p 1', 'Khu ph·ªë 2', 'Th√¥n ƒê√¥ng'],
                'xacu': ['X√£ An Th·ªõi ƒê√¥ng', 'X√£ L√Ω Nh∆°n', 'X√£ Tam Th√¥n Hi·ªáp'],
                'huyencu': ['Huy·ªán C·∫ßn Gi·ªù', 'Huy·ªán C·∫ßn Gi·ªù', 'Huy·ªán C·∫ßn Gi·ªù'],
                'tinhcu': ['TP.HCM', 'TP.HCM', 'TP.HCM'],
                'apmoi': ['·∫§p 1', 'Khu ph·ªë 2', 'Khu ph·ªë ƒê√¥ng'],
                'xamoi': ['X√£ An Th·ªõi ƒê√¥ng', 'X√£ L√Ω Nh∆°n', 'X√£ Tam Th√¥n Hi·ªáp'],
                'tinhmoi': ['TP.HCM', 'TP.HCM', 'TP.HCM']
            }
            
            with pd.ExcelWriter(self.mapping_file, engine='openpyxl') as writer:
                pd.DataFrame(sheet1_data).to_excel(writer, sheet_name='Sheet1', index=False)
                pd.DataFrame(sheet2_data).to_excel(writer, sheet_name='Sheet2', index=False)
            
            print(f"‚úÖ Created sample mapping.xlsx")
            return True
        except Exception as e:
            print(f"‚ùå Failed to create sample mapping.xlsx: {e}")
            return False
    
    def build_executable(self):
        print("\nüî® Building executable...")
        
        if self.dist_folder.exists():
            shutil.rmtree(self.dist_folder)
        if self.build_folder.exists():
            shutil.rmtree(self.build_folder)
        
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--clean",
            "--noconfirm",
            "--onefile",
            "--noconsole",
            "--name", self.exe_name,
            "main.py"
        ]
        
        # Add icon if exists (embedded into exe)
        if self.icon_file.exists():
            cmd.extend(["--icon", str(self.icon_file)])
        
        # CRITICAL: Explicitly EXCLUDE mapping.xlsx from being bundled
        cmd.extend(["--exclude-module", "mapping"])
        cmd.extend(["--add-data", f"{os.devnull};."])  # Dummy data to prevent auto-inclusion
        
        # IMPORTANT: DO NOT add mapping.xlsx to --add-data
        # We want it to remain external for user customization
        
        hidden_imports = [
            'pandas', 'thefuzz', 'openpyxl', 'xlrd', 'watchdog',
            'tkinter', 'tkinter.filedialog', 'tkinter.messagebox', 'tkinter.ttk',
            'concurrent.futures', 'multiprocessing', 'threading',
            'unicodedata', 'urllib.parse', 're', 'json', 'functools',
            'pathlib', 'subprocess', 'time', 'shutil', 'tkinterdnd2'
        ]
        
        for imp in hidden_imports:
            cmd.extend(["--hidden-import", imp])
        
        optional_imports = ['tkinterdnd2', 'Levenshtein', 'pywin32']
        for imp in optional_imports:
            try:
                __import__(imp)
                cmd.extend(["--hidden-import", imp])
            except ImportError:
                pass
        
        print(f"üöÄ Running PyInstaller...")
        print(f"‚ö†Ô∏è IMPORTANT: mapping.xlsx will be EXTERNAL (not bundled)")
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True, 
                                  cwd=str(self.project_root))
            print("‚úÖ Build successful!")
            
            exe_path = self.dist_folder / self.exe_name
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üì¶ Executable created: {exe_path.name} ({size_mb:.1f} MB)")
                print(f"üîç VERIFICATION: mapping.xlsx NOT bundled in executable")
                return exe_path
            else:
                print(f"‚ùå Executable not found")
                return None
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Build failed!")
            print(f"Exit code: {e.returncode}")
            if e.stderr:
                lines = e.stderr.split('\n')
                for line in lines[-10:]:
                    if line.strip():
                        print(f"   {line}")
            return None
    
    def create_readme(self):
        print("\nüìñ Creating README.txt...")
        
        readme_content = """
================================================================================
PIHCM - PH·∫¶N M·ªÄM CHU·∫®N H√ìA ƒê·ªäA CH·ªà B·ªÜNH NH√ÇN
================================================================================
S·∫£n ph·∫©m thu·ªôc s·ªü h·ªØu c·ªßa: Vi·ªán Pasteur TP HCM - Khoa KSPNBT
T√°c gi·∫£: ƒêinh VƒÉn Ng√¥n (08888 31135)
Phi√™n b·∫£n: 1.0 - Windows Edition (External Mapping)

üéØ T√çNH NƒÇNG CH√çNH:
‚Ä¢ Chu·∫©n h√≥a ƒë·ªãa ch·ªâ b·ªánh nh√¢n theo ƒë∆°n v·ªã h√†nh ch√≠nh m·ªõi
‚Ä¢ H·ªó tr·ª£ Excel (.xlsx, .xls) v√† CSV
‚Ä¢ X·ª≠ l√Ω nhi·ªÅu sheet c√πng l√∫c
‚Ä¢ Matching th√¥ng minh v·ªõi fuzzy logic
‚Ä¢ H·ªó tr·ª£ ·∫•p/th√¥n/khu ph·ªë (Sheet2)
‚Ä¢ Auto-restart khi thay ƒë·ªïi mapping
‚Ä¢ External mapping.xlsx c√≥ th·ªÉ c·∫≠p nh·∫≠t ƒë∆∞·ª£c

üìÅ C·∫§U TR√öC G√ìI PH·∫¶N M·ªÄM:
‚îú‚îÄ‚îÄ PIHCM - Chuyen doi don vi hanh chinh.exe  ‚Üê Ch∆∞∆°ng tr√¨nh ch√≠nh (c√≥ icon)
‚îú‚îÄ‚îÄ mapping.xlsx                              ‚Üê File c·∫•u h√¨nh mapping (EXTERNAL)
‚îî‚îÄ‚îÄ README.txt                                ‚Üê File h∆∞·ªõng d·∫´n n√†y

üîß ∆ØU ƒêI·ªÇM EXTERNAL MAPPING:
‚úÖ File mapping.xlsx ·ªü b√™n ngo√†i - kh√¥ng nh√∫ng v√†o .exe
‚úÖ C√≥ th·ªÉ thay th·∫ø mapping.xlsx b·∫±ng phi√™n b·∫£n m·ªõi
‚úÖ Ng∆∞·ªùi d√πng c√≥ th·ªÉ t·ª± ch·ªânh s·ª≠a mapping
‚úÖ D·ªÖ d√†ng c·∫≠p nh·∫≠t m√† kh√¥ng c·∫ßn build l·∫°i ph·∫ßn m·ªÅm
‚úÖ Backup v√† restore mapping d·ªÖ d√†ng

üöÄ C√ÅCH S·ª¨ D·ª§NG:
1. CH·∫†Y CH∆Ø∆†NG TR√åNH:
   ‚Ä¢ Double-click v√†o file .exe
   ‚Ä¢ Icon t√πy ch·ªânh s·∫Ω hi·ªÉn th·ªã t·ª± ƒë·ªông (embedded trong .exe)
   ‚Ä¢ Ch∆∞∆°ng tr√¨nh s·∫Ω t·ª± ƒë·ªông t√¨m file mapping.xlsx c√πng th∆∞ m·ª•c

2. CH·ªåN FILE DANH S√ÅCH:
   ‚Ä¢ Click n√∫t ch·ªçn file HO·∫∂C k√©o th·∫£ file v√†o c·ª≠a s·ªï
   ‚Ä¢ H·ªó tr·ª£: .xlsx, .xls, .csv
   ‚Ä¢ File ph·∫£i c√≥ c√°c c·ªôt: X√£, Huy·ªán, T·ªânh

‚öôÔ∏è CH·ªàNH S·ª¨A MAPPING:
üîß C√ÅCH 1 - T·ª™ TRONG CH∆Ø∆†NG TR√åNH:
   1. Click n√∫t ‚öô (b√°nh rƒÉng) ·ªü g√≥c d∆∞·ªõi ph·∫£i
   2. Excel s·∫Ω m·ªü file mapping.xlsx (EXTERNAL FILE)
   3. Ch·ªânh s·ª≠a theo c·∫•u tr√∫c
   4. Save file v√† ƒë√≥ng Excel
   5. Ch∆∞∆°ng tr√¨nh T·ª∞ ƒê·ªòNG RESTART ngay l·∫≠p t·ª©c

üîß C√ÅCH 2 - THAY TH·∫æ FILE MAPPING:
   1. T·∫£i file mapping.xlsx m·ªõi t·ª´ t√°c gi·∫£
   2. Backup file mapping.xlsx hi·ªán t·∫°i (n·∫øu c·∫ßn)
   3. Thay th·∫ø file mapping.xlsx c√πng th∆∞ m·ª•c v·ªõi .exe
   4. Kh·ªüi ƒë·ªông l·∫°i ch∆∞∆°ng tr√¨nh

üìã C·∫§U TR√öC MAPPING.XLSX:
üìä SHEET1 - Mapping c∆° b·∫£n (X√£ ‚Üí X√£):
   C·ªôt A: xacu     (T√™n x√£ c≈©)
   C·ªôt B: huyencu  (T√™n huy·ªán c≈©)  
   C·ªôt C: tinhcu   (T√©n t·ªânh c≈©)
   C·ªôt D: xamoi    (T√™n x√£ m·ªõi sau s√°p nh·∫≠p)
   C·ªôt E: tinhmoi  (T√™n t·ªânh m·ªõi sau s√°p nh·∫≠p)

üìä SHEET2 - Mapping ·∫•p/th√¥n (·∫§p ‚Üí ·∫§p):
   C·ªôt A: apcu     (T√™n ·∫•p/th√¥n/KP c≈©)
   C·ªôt B: xacu     (T√™n x√£ c≈©)
   C·ªôt C: huyencu  (T√™n huy·ªán c≈©)
   C·ªôt D: tinhcu   (T√™n t·ªânh c≈©)
   C·ªôt E: apmoi    (T√™n ·∫•p/th√¥n/KP m·ªõi)
   C·ªôt F: xamoi    (T√™n x√£ m·ªõi)
   C·ªôt G: tinhmoi  (T·ªânh m·ªõi)

üíª Y√äU C·∫¶U H·ªÜ TH·ªêNG:
‚Ä¢ Windows 8/8.1/10/11 (32-bit ho·∫∑c 64-bit)
‚Ä¢ RAM: T·ªëi thi·ªÉu 2GB (khuy·∫øn ngh·ªã 4GB+)
‚Ä¢ Dung l∆∞·ª£ng: 100MB tr·ªëng
‚Ä¢ Microsoft Excel (ƒë·ªÉ ch·ªânh s·ª≠a mapping)

üîß QU·∫¢N L√ù MAPPING:
‚Ä¢ File mapping.xlsx PH·∫¢I c√πng th∆∞ m·ª•c v·ªõi .exe
‚Ä¢ C√≥ th·ªÉ backup nhi·ªÅu phi√™n b·∫£n mapping kh√°c nhau
‚Ä¢ Khi c·∫≠p nh·∫≠t mapping, ch·ªâ c·∫ßn thay file v√† restart
‚Ä¢ Ch∆∞∆°ng tr√¨nh s·∫Ω b√°o l·ªói n·∫øu kh√¥ng t√¨m th·∫•y mapping.xlsx

üìû H·ªñ TR·ª¢ K·ª∏ THU·∫¨T:
‚Ä¢ T√°c gi·∫£: ƒêinh VƒÉn Ng√¥n
‚Ä¢ ƒêi·ªán tho·∫°i: 08888 31135
‚Ä¢ ƒê∆°n v·ªã: Vi·ªán Pasteur TP HCM - Khoa KSPNBT

‚öñÔ∏è B·∫¢N QUY·ªÄN:
Ph·∫ßn m·ªÅm thu·ªôc s·ªü h·ªØu c·ªßa Vi·ªán Pasteur TP HCM
Ch·ªâ s·ª≠ d·ª•ng n·ªôi b·ªô - Kh√¥ng ph√¢n ph·ªëi l·∫°i

================================================================================
C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ph·∫ßn m·ªÅm PIHCM!
================================================================================
"""
        
        readme_file = self.project_root / "README.txt"
        with open(readme_file, 'w', encoding='utf-8') as f:
            f.write(readme_content.strip())
        
        print(f"‚úÖ Created {readme_file}")
        return readme_file
    
    def create_delivery_package(self, exe_path):
        print("\nüì¶ Creating delivery package...")
        
        if self.dist_final.exists():
            shutil.rmtree(self.dist_final)
        self.dist_final.mkdir()
        
        # Copy executable
        final_exe = self.dist_final / self.exe_name
        shutil.copy2(exe_path, final_exe)
        print(f"‚úÖ Copied: {self.exe_name} (with embedded icon)")
        
        # Copy external mapping.xlsx
        final_mapping = self.dist_final / "mapping.xlsx"
        shutil.copy2(self.mapping_file, final_mapping)
        print(f"‚úÖ Copied: mapping.xlsx (EXTERNAL - can be updated)")
        
        # Create README
        readme_file = self.create_readme()
        final_readme = self.dist_final / "README.txt"
        shutil.copy2(readme_file, final_readme)
        print(f"‚úÖ Created: README.txt")
        
        # Verify external mapping setup
        print(f"\nüîç VERIFICATION - External Mapping Setup:")
        print(f"   ‚Ä¢ mapping.xlsx location: {final_mapping}")
        print(f"   ‚Ä¢ Size: {final_mapping.stat().st_size / 1024:.1f} KB")
        print(f"   ‚Ä¢ Can be replaced: YES")
        print(f"   ‚Ä¢ Can be edited: YES")
        print(f"   ‚Ä¢ Auto-detected by app: YES")
        
        files = list(self.dist_final.iterdir())
        total_size = sum(f.stat().st_size for f in files if f.is_file())
        
        print(f"\nüéÅ DELIVERY PACKAGE CREATED:")
        print(f"üìÅ Location: {self.dist_final}")
        print(f"üìä Total size: {total_size / (1024*1024):.1f} MB")
        print(f"üìã Files ({len(files)}):")
        
        for file in sorted(files):
            if file.is_file():
                size_mb = file.stat().st_size / (1024 * 1024)
                external_marker = " üìÅ (external/editable)" if file.name == "mapping.xlsx" else ""
                embedded_marker = " üé® (embedded icon)" if file.name.endswith('.exe') else ""
                print(f"   ‚Ä¢ {file.name} ({size_mb:.1f} MB){external_marker}{embedded_marker}")
        
        return self.dist_final
    
    def build_all(self):
        print("üöÄ PIHCM BUILD PROCESS STARTING...")
        print("=" * 60)
        print("üìÅ EXTERNAL MAPPING VERSION - mapping.xlsx ·ªü b√™n ngo√†i")
        print("=" * 60)
        
        try:
            if not self.check_requirements():
                print("‚ùå Requirements check failed")
                return False
            
            print("\nüéØ Building executable with external mapping support...")
            exe_path = self.build_executable()
            
            if not exe_path:
                print("\nüí• Build failed!")
                return False
            
            package_dir = self.create_delivery_package(exe_path)
            
            print("\n" + "=" * 60)
            print("‚úÖ BUILD COMPLETED SUCCESSFULLY!")
            print("=" * 60)
            print(f"üì¶ Delivery package: {package_dir}")
            
            files = list(package_dir.iterdir())
            file_count = len([f for f in files if f.is_file()])
            
            print(f"üìÅ Contains {file_count} files:")
            print(f"   1. {self.exe_name} (with embedded icon)")
            print(f"   2. mapping.xlsx (EXTERNAL - can be updated)")
            print(f"   3. README.txt (user documentation)")
            
            print("")
            print("üéØ READY FOR DELIVERY!")
            print("üîß Features guaranteed:")
            print("   ‚úÖ External mapping.xlsx support") 
            print("   ‚úÖ Auto-restart on mapping changes")
            print("   ‚úÖ User can replace mapping.xlsx")
            print("   ‚úÖ Windows optimized")
            print("   ‚úÖ No console window")
            print("   ‚úÖ Embedded icon (never lost)")
            print("   ‚úÖ Complete documentation")
            
            print("")
            print("üìÅ EXTERNAL MAPPING BENEFITS:")
            print("   ‚Ä¢ mapping.xlsx is NOT bundled into .exe")
            print("   ‚Ä¢ Users can download new mapping versions")
            print("   ‚Ä¢ Users can edit mapping directly")
            print("   ‚Ä¢ Easy backup and restore")
            print("   ‚Ä¢ No need to rebuild app for mapping updates")
            
            print("")
            print("üîß TESTING RECOMMENDATIONS:")
            print("   1. Run the .exe and verify it loads mapping.xlsx")
            print("   2. Edit mapping.xlsx externally and restart app")
            print("   3. Replace mapping.xlsx with different version")
            print("   4. Verify app detects mapping changes automatically")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Build process failed: {e}")
            return False

def main():
    try:
        builder = PIHCMBuilder()
        success = builder.build_all()
        
        if success:
            print("\nüéâ SUCCESS! Package ready for delivery.")
            print("\nüìÅ EXTERNAL MAPPING REMINDER:")
            print("   ‚Ä¢ mapping.xlsx is EXTERNAL (not in .exe)")
            print("   ‚Ä¢ Users can replace mapping.xlsx anytime")
            print("   ‚Ä¢ App will auto-detect mapping changes")
            print("   ‚Ä¢ Perfect for version updates and customization")
            input("\nPress Enter to exit...")
            return 0
        else:
            print("\nüí• FAILED! Check errors above.")
            input("\nPress Enter to exit...")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Build interrupted by user")
        return 1
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        return 1

if __name__ == "__main__":
    exit(main())